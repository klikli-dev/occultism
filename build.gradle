plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version "${neogradle_version}"
}

tasks.named('wrapper', Wrapper).configure {
    // Define wrapper values here so as to not have to always do so when updating gradlew.properties.
    // Switching this to Wrapper.DistributionType.ALL will download the full gradle sources that comes with
    // documentation attached on cursor hover of gradle classes and methods. However, this comes with increased
    // file size for Gradle. If you do switch this to ALL, run the Gradle wrapper task twice afterwards.
    // (Verify by checking gradle/wrapper/gradle-wrapper.properties to see if distributionUrl now points to `-all`)
    distributionType = Wrapper.DistributionType.ALL
}


if (System.getenv('MOD_VERSION') != null) {
    mod_version = System.getenv('MOD_VERSION')
}
version = mod_version

base {
    archivesName = "${mod_id}-${minecraft_version}-neoforge"
}

//TODO: re enable source sets once mods are updated
sourceSets {
    main {
        java {
            exclude '**/AlmostUnifiedIntegrationImpl.java'
//            exclude '**/emi/**/*.java'
//            exclude '**/jei/impl/**/*.java'
            exclude 'com/klikli_dev/occultism/common/item/tool/FamiliarRingItem.java'
        }
    }
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)
java.withSourcesJar()

if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
    minecraft.accessTransformers.file file('src/main/resources/META-INF/accesstransformer.cfg')
}

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'
        jvmArguments.addAll('-XX:+AllowEnhancedClassRedefinition', '-XX:+IgnoreUnrecognizedVMOptions')
        modSource project.sourceSets.main
    }

    client {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument "--username=Occultism"
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
//        programArgument '--nogui'
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url "https://dl.cloudsmith.io/public/klikli-dev/mods/maven/"
        content {
            includeGroup "com.klikli_dev"
        }
    }
    maven {
        name = "JEI and AlmostUnified"
        url = 'https://maven.blamejared.com/'
        content {
            includeGroup "mezz.jei"
            includeGroup "com.almostreliable.mods"
        }
    }
    maven {
        name = "Curios Maven"
        url = "https://maven.theillusivec4.top/"
        content {
            includeGroup "top.theillusivec4.curios"
        }
    }
    maven {
        name = "Geckolib Maven"
        url = "https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/"
        content {
            includeGroup "software.bernie.geckolib"
        }
    }
    maven {
        name 'LDTTeam - Modding - PerViamInvenire (MineColonies)'
        url 'https://ldtteam.jfrog.io/ldtteam/modding/'
        content {
            includeGroup "com.ldtteam"
        }
    }
    maven {
        name = "SBL Maven"
        url "https://dl.cloudsmith.io/public/tslat/sbl/maven/"
        content {
            includeGroup "net.tslat.smartbrainlib"
        }
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        name = "TerraformersMC (emi)"
        url = "https://maven.terraformersmc.com/"
        content {
            includeGroup "dev.emi"
        }
    }
    flatDir {
        dirs 'lib'
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    //Jei
    compileOnly "mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"
    compileOnly "mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}"
    runtimeOnly "mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}"

    //curios
//    compileOnly "top.theillusivec4.curios:curios-neoforge:${curios_version}+${minecraft_version}:api"
//    runtimeOnly "top.theillusivec4.curios:curios-neoforge:${curios_version}+${minecraft_version}"

    //geckolib
    implementation "software.bernie.geckolib:geckolib-neoforge-${geckolib_minecraft_version}:${geckolib_version}"

    //smartbrainlib
    implementation "net.tslat.smartbrainlib:SmartBrainLib-neoforge-${smartbrainlib_minecraft_version}:${smartbrainlib_version}"

    //TODO: enable once available
    //almostunified
//    implementation "com.almostreliable.mods:almostunified-forge:${minecraft_version}-${almost_unified_version}"

    //modonomicon
    implementation "com.klikli_dev:modonomicon-${minecraft_version}-neoforge:${modonomicon_version}"

    //theurgy
    compileOnly "com.klikli_dev:theurgy-${minecraft_version}-neoforge:${theurgy_version}"
    runtimeOnly "com.klikli_dev:theurgy-${minecraft_version}-neoforge:${theurgy_version}"

    // emi
    compileOnly "dev.emi:emi-neoforge:${emi_version}:api"
    if(System.getenv("EMI") == "true") {
        runtimeOnly "dev.emi:emi-neoforge:${emi_version}"
    }

    //runtime only helper mods for dev env, placed in ./runtime-mods, example: Hwyla-forge-1.10.11-B78_1.16.2.jar
    //runtimeOnly "ignoredvalue:Hwyla:forge-1.10.11-B78_1.16.2"

    //alltheores - for recipe testing
    //enable once available for 1.20
    //runtimeOnly "curse.maven:alltheores-405593:xyz" //

    //PerViamInvenire - for AI integration testing
    //runtimeOnly "curse.maven:perviaminvenire-449945:xyz" //
    //enable once available for 1.20
    //runtimeOnly "com.ldtteam:per_viam_invenire:1.19.3-XYZ-RELEASE:universal"
}

processResources {
    filesMatching(['META-INF/neoforge.mods.toml', 'pack.mcmeta']) {
        expand project.properties
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : mod_version,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()

            from components.java

            pom {
                name = mod_name
                description = 'A magic mod inspired by the world of Jonathan Stroud\'s Bartimaeus. With the help of occult rituals players can summon entities from the "Other Side" to perform magic.'
                url = 'https://github.com/klikli-dev/occultism'
                licenses {
                    license {
                        name = 'MIT AND CC-BY-4.0'
                        url = 'https://github.com/klikli-dev/occultism#licensing'
                    }
                }
                scm {
                    connection = 'scm:git:ssh:git@github.com:klikli-dev/occultism.git'
                    url = 'https://github.com/klikli-dev/occultism'
                }
            }
        }
    }
    repositories {
        maven {
            name = "cloudsmith"
            url = "https://maven.cloudsmith.io/klikli-dev/mods/"
            def releasesRepoUrl = "https://maven.cloudsmith.io/klikli-dev/mods/"
            def snapshotsRepoUrl = "https://maven.cloudsmith.io/klikli-dev/mods/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = System.getenv('MAVEN_USER')
                password = System.getenv('MAVEN_PASS')
            }
        }
    }
}

//increase max errors from 100 to 2000
afterEvaluate {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xmaxerrs" << "2000"
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}