plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

if (System.getenv('MOD_VERSION') != null) {
    mod_version = System.getenv('MOD_VERSION')
}
if (System.getenv('MINECRAFT_VERSION') != null) {
    minecraft_version = System.getenv('MINECRAFT_VERSION')
}
version = "${minecraft_version}-${mod_version}"

group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {

    mappings channel: mapping_channel, version: mapping_version

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')
            args '--username', 'Occultism'
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            //Fix for patchouli mixin crash
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // enable using JBR to hotswap MOAR
            // also ignore the option if someone isnt using JBR
            jvmArgs '-XX:+AllowEnhancedClassRedefinition', '-XX:+IgnoreUnrecognizedVMOptions'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        clientalt {
            parent runs.client
            //somehow doesnt replace the name but adds a new one, so we manually need remove
            args '--username', 'Dev####' //#s get replaced with random numbers when starting
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            //Workaround for patchouli mixin crash
            property 'mixin.env.disableRefMap', 'true'

            // enable using JBR to hotswap MOAR
            // also ignore the option if someone isnt using JBR
            jvmArgs '-XX:+AllowEnhancedClassRedefinition', '-XX:+IgnoreUnrecognizedVMOptions'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            //Workaround for patchouli mixin crash
            property 'mixin.env.disableRefMap', 'true'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'occultism', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name = "KliKli Dev Repsy Maven"
        url = "https://repo.repsy.io/mvn/klikli-dev/mods"
        content {
            includeGroup "com.klikli_dev"
        }
    }
    maven {
        name = "JEI and AlmostUnified"
        url = 'https://maven.blamejared.com/'
        content {
            includeGroup "mezz.jei"
            includeGroup "com.almostreliable.mods"
        }
    }
    maven {
        name = "Curios Maven"
        url = "https://maven.theillusivec4.top/"
        content {
            includeGroup "top.theillusivec4.curios"
        }
    }
    maven {
        name = "Geckolib Maven"
        url = "https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/"
        content {
            includeGroup "software.bernie.geckolib"
        }
    }
    maven {
        name 'LDTTeam - Modding - PerViamInvenire (MineColonies)'
        url 'https://ldtteam.jfrog.io/ldtteam/modding/'
        content {
            includeGroup "com.ldtteam"
        }
    }
    maven {
        name = "SBL Maven"
        url "https://dl.cloudsmith.io/public/tslat/sbl/maven/"
        content {
            includeGroup "net.tslat.smartbrainlib"
        }
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    flatDir {
        dirs 'lib'
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${forge_version}"

    //Jei
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")

    //curios
    //TODO: reenable once updated
//    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${minecraft_version}-${curios_version}:api")
//    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${minecraft_version}-${curios_version}")

    //geckolib
    implementation fg.deobf("software.bernie.geckolib:geckolib-forge-${minecraft_version}:${geckolib_version}")

    //smartbrainlib
    implementation fg.deobf("net.tslat.smartbrainlib:SmartBrainLib-forge-${minecraft_version}:${smartbrainlib_version}")

    //almostunified
    //TODO: reenable once updated
//    compileOnly fg.deobf("com.almostreliable.mods:almostunified-forge:${almostunified_version}")
//    runtimeOnly fg.deobf("com.almostreliable.mods:almostunified-forge:${almostunified_version}")

    //modonomicon
    implementation fg.deobf("com.klikli_dev:modonomicon:${minecraft_version}-${modonomicon_version}")
    //we build against full jar because we NEED IT ALL

    //theurgy
    //TODO: reenable once updated
//    compileOnly fg.deobf("com.klikli_dev:theurgy:${minecraft_version}-${theurgy_version}")
//    runtimeOnly fg.deobf("com.klikli_dev:theurgy:${minecraft_version}-${theurgy_version}")

    //runtime only helper mods for dev env, placed in ./runtime-mods, example: Hwyla-forge-1.10.11-B78_1.16.2.jar
    //runtimeOnly fg.deobf("ignoredvalue:Hwyla:forge-1.10.11-B78_1.16.2")

    //alltheores - for recipe testing
    //enable once available for 1.20
    //runtimeOnly fg.deobf("curse.maven:alltheores-405593:xyz") //

    //Ma for crafting issue testing
//    runtimeOnly fg.deobf("curse.maven:mysticalagriculture-246640:4399151") //MysticalAgriculture-1.19.3-6.1.4.jar
//    runtimeOnly fg.deobf("curse.maven:cucumber-272335:4395466") //Cucumber-1.19.3-6.1.2.jar

    //PerViamInvenire - for AI integration testing
    //runtimeOnly fg.deobf("curse.maven:perviaminvenire-449945:xyz") //
    //enable once available for 1.20
    //runtimeOnly fg.deobf("com.ldtteam:per_viam_invenire:1.19.3-XYZ-RELEASE:universal")
}


// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def replaceProperties = [
        minecraft_version              : minecraft_version,
        minecraft_version_range        : minecraft_version_range,
        forge_version                  : forge_version,
        forge_version_range            : forge_version_range,
        loader_version_range           : loader_version_range,
        mod_id                         : mod_id,
        mod_name                       : mod_name,
        mod_license                    : mod_license,
        mod_version                    : mod_version,
        mod_authors                    : mod_authors,
        mod_description                : mod_description,
        jei_version_range              : jei_version_range,
        curios_version_range           : curios_version_range,
        geckolib_version_range         : geckolib_version_range,
        smartbrainlib_version_range    : smartbrainlib_version_range,
        almostunified_version_range    : almostunified_version_range,
        modonomicon_version_range      : modonomicon_version_range,
        theurgy_version_range          : theurgy_version_range,
        per_viam_invenire_version_range: per_viam_invenire_version_range,
]
processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : mod_version,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

//increase max errors from 100 to 2000
afterEvaluate {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xmaxerrs" << "2000"
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

processResources.setDuplicatesStrategy(DuplicatesStrategy.WARN)